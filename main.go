// Account Generator Bot// Copyright (C) 2021 AnonyIndian (@xnony) // This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the// GNU Affero General Public License for more details. package main import (	"fmt"	"math/rand"	"strings"	"strconv"	"time"	"os"	"github.com/PaulSonOfLars/gotgbot/v2"	"github.com/PaulSonOfLars/gotgbot/v2/ext"	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers") var MSG string func main() {	// Put Your Bot Token via ENV Vars	b, err := gotgbot.NewBot(os.Getenv("TOKEN"))	if err != nil {		panic("failed to create new bot: " + err.Error())	} 	// Create updater and dispatcher.	updater := ext.NewUpdater(b, nil)	dispatcher := updater.Dispatcher 	// Handlers for runnning commands.	dispatcher.AddHandler(handlers.NewCommand("start", start))	dispatcher.AddHandler(handlers.NewCommand("gen", gen)) 	err = updater.StartPolling(b, &ext.PollingOpts{Clean: true})	if err != nil {		panic("failed to start polling: " + err.Error())	}	fmt.Printf("%s has been started...\nMade with ❤️ by @doreamonfans1 (@doreamonfans1).\n", b.User.Username) 	// Idle, to keep updates coming in, and avoid bot stopping.	updater.Idle()} func init() {	rand.Seed(time.Now().UnixNano())} func randomFormat() string {	formats := []string{		// Put your accounts here		// "email:pass",		// Following are some demo accounts		"sharan.thatsme@gmail.com:ganesha86",		"kushagra.khare04@gmail.com:9450461810",		"gaurav.apt@gmail.com:cashc0w",		"ananthusatheesh89@gmail.com:50thregenesis",		"ankitraghavec2015@gmail.com:akku_8802",		"jasmeetsingh2027@gmail.com:banaliid",		"ashishgupta0586@gmail.com:welcome",		"uferatanyeem@gmail.com:viewsonic20",	} 	return formats[rand.Intn(len(formats))]} func start(ctx *ext.Context) error {	// To ensure bot does not reply outside of private chats	if ctx.EffectiveChat.Type != "private" {		return nil	}	// Following string is replied to cmd user on /start 	MSG = "*Hi %v,\n" +		"I am an Disney Team Netfiex premium Account Generator Bot\n" +		"-------------------------------------------------\n" +		"I can provide premium accounts of different services\n" +		"--------------------------------------------------\n" +		"Do /gen to generate an account\n" +		"--------------------------------------------------\n" +		"❤️Brought to You By @disneygrou❤️\n*" 	user := ctx.EffectiveUser	channel_id, cerror := strconv.Atoi(os.Getenv("CHANNEL_ID"))	if cerror != nil {fmt.Println("Please Provide me a valid Channel ID")}	member, eror := ctx.Bot.GetChatMember(int64(channel_id), user.Id)	if eror != nil {		ctx.Bot.SendMessage(ctx.EffectiveChat.Id, "*Bot not admin in JoinCheck Channel.*", nil)		return nil	}	// For Checking either user joined channel or not	if member.Status == "member" || member.Status == "administrator" || member.Status == "creator" {		_, err := ctx.EffectiveMessage.Reply(ctx.Bot, fmt.Sprintf(MSG, user.FirstName), &gotgbot.SendMessageOpts{			ParseMode: "Markdown",		})		if err != nil {			fmt.Println("failed to send: " + err.Error())		}	} else {		// An Error message replied to command user if he's not member of the JoinCheck Channel		ctx.EffectiveMessage.Reply(ctx.Bot, fmt.Sprintf("*You must join %v To use me.*", os.Getenv("CHANNEL_USERNAME")), &gotgbot.SendMessageOpts{ParseMode: "Markdown"})	}	if strings.ToLower(os.Getenv("LOGS")) != "false"{		logs, log_err := strconv.Atoi(os.
